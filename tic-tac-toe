#include <iostream>

char board[3][3];
char currentPlayer;

void initializeBoard() 
{
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            board[i][j] = ' ';
    currentPlayer = 'X';    // X starts first
}

void printBoard() 
{
    std::cout << "\n";
    for (int i = 0; i < 3; i++) {
        std::cout << " ";
        for (int j = 0; j < 3; j++) {
            std::cout << board[i][j];
            if (j < 2) std::cout << " | ";
        }
        std::cout << "\n";
        if (i < 2) 
            std::cout << "---+---+---\n";
    }
    std::cout << "\n";
}

// checks wether the coordinates chosen by currentPlayer fit within the board and the position is empty
bool isValidMove(int row, int col) 
{
    return row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ';
}

bool checkWin() {
    // checks is currentPlayer won by checking its char on the lines and the columns
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == currentPlayer &&
            board[i][1] == currentPlayer &&
            board[i][2] == currentPlayer)
            return true;

        if (board[0][i] == currentPlayer &&
            board[1][i] == currentPlayer &&
            board[2][i] == currentPlayer)
            return true;
    }

    // checks is currentPlayer won by checking its char on the lines and the columns
    if (board[0][0] == currentPlayer &&
        board[1][1] == currentPlayer &&
        board[2][2] == currentPlayer)
        return true;

    if (board[0][2] == currentPlayer &&
        board[1][1] == currentPlayer &&
        board[2][0] == currentPlayer)
        return true;

    return false;
}

bool isBoardFull() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ')
                return false;
    return true;
}

void switchPlayer() {
    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
}

int main() 
{
    initializeBoard();

    while (true) 
    {
        printBoard();
        int row, col;

        std::cout << "Player " << currentPlayer << ", enter row and column (1-3): ";
        std::cin >> row >> col;
        --row; 
        --col;
        
        // is move is not valid, currentPlayer is asked to input again
        if (!isValidMove(row, col)) 
        {
            std::cout << "Invalid move! Try again.\n";
            continue;
        }
        
        // update the board
        board[row][col] = currentPlayer;
    
        if (checkWin()) 
        {
            printBoard();
            std::cout << "Player " << currentPlayer << " wins!\n";
            break;
        } else if (isBoardFull()) 
        {
            printBoard();
            std::cout << "It's a draw!\n";
            break;
        }

        switchPlayer();
    }

    return 0;
}
